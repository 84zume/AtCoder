#!/usr/bin/env python3
# from typing import *
import bisect


def reverse_insort(a, x, lo=0, hi=None):
    """Insert item x in list a, and keep it reverse-sorted assuming a
    is reverse-sorted.

    If x is already in a, insert it to the right of the rightmost x.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    """
    if lo < 0:
        raise ValueError("lo must be non-negative")
    if hi is None:
        hi = len(a)
    while lo < hi:
        mid = (lo + hi) // 2
        if x > a[mid]:
            hi = mid
        else:
            lo = mid + 1
    a.insert(lo, x)


# def solve(N: int, K: int, P: List[int]) -> Any:
def solve(N, K, P):
    ans = []
    l = sorted(P[:K], reverse=True)
    # print(l)

    ans.append(l[-1])

    for i in range(K, N):
        # bisect.insort(l, P[i])
        reverse_insort(l, P[i])
        l.pop()
        # print(l)
        ans.append(l[-1])
    return ans


# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
def main():
    N, K = map(int, input().split())
    P = list(map(int, input().split()))
    ans = solve(N, K, P)
    for a in ans:
        print(a)


if __name__ == "__main__":
    main()
